#!/usr/bin/env bash
BASE_COMMAND="docker-compose -f docker-compose.builder.yml run --rm"
API_REPOSITORY="git@github.com:WesleyKlop/journali-api.git"
API_FOLDER="journali-api"
FRONTEND_REPOSITORY="git@github.com:WesleyKlop/journali-frontend.git"
FRONTEND_FOLDER="journali-frontend"

source ./dev.env

echo "      _                              _ _
     | |                            | (_)
     | | ___  _   _ _ __ _ __   __ _| |_
 _   | |/ _ \| | | | '__| '_ \ / _\` | | |
| |__| | (_) | |_| | |  | | | | (_| | | |
 \____/ \___/ \__,_|_|  |_| |_|\__,_|_|_|
"

function init_repos() {
    if [ -d $API_FOLDER ] && [ -d $FRONTEND_FOLDER ]; then
        echo "Already initialized" 1>&2
        return
    fi

    if [ ! -d $API_FOLDER ]; then
        git clone $API_REPOSITORY $API_FOLDER
    fi

    if [ ! -d $FRONTEND_FOLDER ]; then
        git clone $FRONTEND_REPOSITORY $FRONTEND_FOLDER
    fi
}

function print_help() {
    echo "Available commands:
 - init: Initialize the child repositories
 - install: Intall frontend node dependencies
 - migrate: Migrate the database
 - start: Start the development environment
 - stop: Stop the development environment
 - psql: Open a shell on the postgres database
 - yarn [command]: Run any yarn command on the frontend environment
 - cargo [command]: Run any cargo command on the api environment
 - diesel [command]: Run any diesel commando on the database environment
 - help: This command"
}

function init_docker() {
    docker network rm journali
    docker network create journali
}

case $1 in
init)
    echo " - Initializing repository"
    init_repos
    echo " - Creating docker networks"
    init_docker
    ;;
install)
    echo " - Installing frontend dependencies for the frontend"
    eval "$BASE_COMMAND" install
    ;;
start)
    echo " - Starting development environment"
    docker-compose up -d
    ;;
stop)
    echo " - Stopping development environment"
    docker-compose down --remove-orphans
    ;;
yarn | cargo | diesel | migrate)
    echo "- Running: $BASE_COMMAND ${*:1}"
    eval "$BASE_COMMAND" "${*:1}"
    ;;
psql)
    docker-compose exec postgres psql -U $POSTGRES_USER -w -d $POSTGRES_DB
    ;;
help)
    print_help
    ;;
*)
    echo "Unknown command \"$1\"" 1>&2
    print_help
    exit 1
    ;;
esac
